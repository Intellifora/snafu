#!/usr/bin/env python3
#
# Snafu: Snake Functions - Import Utility

import argparse
import subprocess
import json
import os
import sys
import lib.snafu

class SnafuImportUtility:
	def __init__(self):
		pass

	def start_import(self):
		parser = argparse.ArgumentParser(description="Snake Functions as a Service - Import Utility")
		parser.add_argument("-s", "--source", help="import source", choices=["lambda", "gfunctions"], default=None)
		parser.add_argument("-c", "--convert", help="convert functions from Python 2 to Python 3 for native execution")
		args = parser.parse_args()

		lib.snafu.SnafuImport.prepare()

		if args.source is None:
			print("Must specify a source with --source.", file=sys.stderr)
		elif args.source == "lambda":
			self.import_lambda(args.convert)
		elif args.source == "gfunctions":
			self.import_gfunctions()

	def import_gfunctions(self):
		proc = subprocess.run("gcloud beta functions list", stdout=subprocess.PIPE, shell=True)
		out = proc.stdout.decode("utf-8")
		functiondir = lib.snafu.SnafuImport.functiondir
		for line in out.split("\n"):
			lineparts = line.split(" ")
			if len(lineparts) > 1 and lineparts[0] != "NAME":
				funcname = lineparts[0]
				print("import", funcname)
				lib.snafu.SnafuImport.functiondir = os.path.join(functiondir, funcname)
				proc = subprocess.run("gcloud beta functions describe {}".format(funcname), stdout=subprocess.PIPE, shell=True)
				out = proc.stdout.decode("utf-8")
				#sourceArchiveUrl: gs://functions-163510-bucket/function-1-2017-04-03T10:10:25.959Z.zip
				for line in out.split("\n"):
					key, *value = line.split(":")
					value = ":".join(value)
					if key == "sourceArchiveUrl":
						funccode = value.strip()
						codezip = os.path.join(lib.snafu.SnafuImport.functiondir, "..", os.path.basename(funccode))
						proc = subprocess.run("gsutil -q cp {} {}".format(funccode, codezip), stdout=subprocess.PIPE, shell=True)

						codefile, configfile, oldcodefile = lib.snafu.SnafuImport.importfunction(funcname, codezip, None, False)
						print("+ code: {}".format(codefile))

	def import_lambda(self, convert):
		proc = subprocess.run("aws lambda list-functions", stdout=subprocess.PIPE, shell=True)
		out = proc.stdout.decode("utf-8")
		functions = json.loads(out)
		functiondir = lib.snafu.SnafuImport.functiondir
		for func in functions["Functions"]:
			funcname = func["FunctionName"]
			print("import", funcname)
			lib.snafu.SnafuImport.functiondir = os.path.join(functiondir, funcname)
			proc = subprocess.run("aws lambda get-function --function-name {}".format(funcname), stdout=subprocess.PIPE, shell=True)
			out = proc.stdout.decode("utf-8")
			function = json.loads(out)
			funccode = function["Code"]["Location"]
			codezip = os.path.join(lib.snafu.SnafuImport.functiondir, "..", funcname + ".zip")
			subprocess.run("wget -q -O {} '{}'".format(codezip, funccode), shell=True)

			codefile, configfile, oldcodefile = lib.snafu.SnafuImport.importfunction(funcname, codezip, func, convert)

			print("+ code: {}".format(codefile))
			print("+ configuration: {}".format(configfile))
			if oldcodefile:
				print("+ converted; old code: {}".format(oldcodefile))

siu = SnafuImportUtility()
siu.start_import()
