#!/usr/bin/env python3
#
# Snafu: Snake Functions - Control Plane

import flask
import json
import argparse
import os
import base64
import subprocess
import lib.snafu

"""
/ [sts] get-caller-identity
/ add-permission
create-alias
create-event-source-mapping
* create-function
delete-alias
delete-event-source-mapping
delete-function
get-account-settings
get-alias
get-event-source-mapping
get-function
* get-function-configuration
get-policy
# help
* invoke
invoke-async
list-aliases
list-event-source-mappings
* list-functions
list-versions-by-function
publish-version
remove-permission
update-alias
update-event-source-mapping
update-function-code
update-function-configuration
"""

class ControlUtil:
	def createconfig(function, sourceinfos):
		sourcename, functionname = function.split(".")

		fmap = {}
		env = {}
		envvars = {}
		#envvars["TEST"] = "XXX"
		if envvars:
			env["Variables"] = envvars
		vpc = {}
		#vpc["SecurityGroupIds"] = []
		#vpc["SubnetIds"] = []
		fmap["FunctionName"] = function
		fmap["Version"] = "$LATEST"
		#fmap["MemorySize"] = 128
		fmap["MemorySize"] = -1
		fmap["Handler"] = "{}.{}".format(sourcename, functionname)
		fmap["LastModified"] = "2017-01-01T00:00:00.000+0000"
		fmap["CodeSha256"] = sourceinfos.checksum
		fmap["CodeSize"] = sourceinfos.size
		fmap["Timeout"] = 3
		#fmap["Runtime"] = "python2.7"
		fmap["Runtime"] = "python3"
		fmap["Description"] = "<function without configuration>"
		#fmap["Role"] = "arn:...:XXX"
		#fmap["FunctionArn"] = "arn:...:XXX"
		if env:
			fmap["Environment"] = env
		if vpc:
			fmap["VpcConfig"] = vpc
		return fmap

	def functionconfiguration(function):
		func, config, sourceinfos = SnafuControl.snafu.functions[function]
		if config:
			fmap = config
		else:
			fmap = ControlUtil.createconfig(function, sourceinfos)
		return fmap

class SnafuControl:
	app = flask.Flask("snafu-control")
	snafu = None

	def __init__(self):
		pass

	@app.route("/", methods=["POST"])
	def sts():
		#data = flask.request.data.decode("utf-8")
		return "<GetCallerIdentityResponse xmlns='https://sts.amazonaws.com/doc/2011-06-15/'><GetCallerIdentityResult><Account>000000000000</Account></GetCallerIdentityResult></GetCallerIdentityResponse>"

	@app.route("/2015-03-31/functions", methods=["POST"])
	def createfunction():
		data = flask.request.data.decode("utf-8")
		config = json.loads(data)
		functionname = config["FunctionName"]
		try:
			os.makedirs("functions-local/{}".format(functionname))
		except:
			err = json.dumps({"errorMessage": "ResourceConflictException"})
			return err, 501

		f = open("functions-local/{}.zip".format(functionname), "wb")
		f.write(base64.b64decode(config["Code"]["ZipFile"]))
		f.close()

		filename = config["Handler"].split(".")[0]
		subprocess.run("cd functions-local/{} && unzip -q ../{}.zip".format(functionname, functionname), shell=True)
		f = open("functions-local/{}/{}.config".format(functionname, filename), "w")
		del config["Code"]
		# TODO: extend configuration
		f.write(json.dumps(config))
		f.close()
		return json.dumps(config)

	@app.route("/2015-03-31/functions/")
	def listfunctions():
		f = []
		for function in SnafuControl.snafu.functions:
			fmap = ControlUtil.functionconfiguration(function)
			f.append(fmap)

		functions = {"Functions" : f}
		return json.dumps(functions)

	@app.route("/2015-03-31/functions/<function>/configuration")
	def getfunctionconfiguration(function):
		if function in SnafuControl.snafu.functions:
			return json.dumps(ControlUtil.functionconfiguration(function))
		else:
			err = json.dumps({"errorMessage": "ResourceNotFoundException"})
			return err, 501

	@app.route("/2015-03-31/functions/<function>/policy", methods=["POST"])
	def addpermission(function):
		data = flask.request.data.decode("utf-8")
		"""
		{"Action": "lambda:InvokeFunction", "StatementId": "Y_reverse", "Principal": "X"}
		->
		{"Statement": "{\"Sid\":\"Y_reverse\",\"Resource\":\"arn:aws:lambda:us-west-1:*:function:Y\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::*:role/lambda_basic_execution\"},\"Action\":[\"lambda:InvokeFunction\"]}"}
		"""
		return "{}"

	@app.route("/2015-03-31/functions/<function>/invocations", methods=["POST"])
	def invoke(function):
		dataargs = {}
		data = flask.request.data.decode("utf-8")
		if data:
			dataargs["event"] = data

		response = SnafuControl.snafu.execute(function, **dataargs)
		if not response:
			#flask.abort(500)
			err = json.dumps({"errorMessage": "ServiceException"})
			return err, 501
		return response

	@app.errorhandler(404)
	def notfound(error):
		return "Invalid request.", 404

	def run(self):
		parser = argparse.ArgumentParser(description="Snake Functions as a Service - Control Plane")
		parser.add_argument("file", nargs="*", help="source file(s) or directories to activate; uses './functions' by default")
		args = parser.parse_args()

		if not args.file:
			args.file.append("functions")
			args.file.append("functions-local")

		SnafuControl.snafu = lib.snafu.Snafu(False)
		self.snafu.activate(args.file, "lambda")

		self.app.run(host="0.0.0.0", port=10000)

sc = SnafuControl()
sc.run()
